subprojects {
    def shortAlfrescoVersion = project.name.split("-")[2]
    apply from: "${rootProject.projectDir}/alfresco/$shortAlfrescoVersion/overrides.gradle"
    apply from: "${rootProject.projectDir}/publish.gradle"
    apply plugin: 'eu.xenit.amp'
    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'java-library'

    configurations {
        ampArtifact
        dynamicExtensionsBundles
    }

    dependencies {
        api(project(":apix-impl"))
        dynamicExtensionsBundles(group: 'eu.xenit.swagger.ui', name: 'swagger-ui_5x', version: '1.1.0') {
            transitive = false
        } // Works for 6x too
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId "${project.name}-amp"
                artifact tasks.amp
            }
        }
    }

    artifacts {
        ampArtifact amp
    }

    sourceSets {
        main {
            java {
                srcDirs = ["$project.parent.projectDir/src/main/java"]
            }
            amp {
                dynamicExtension()
                module {
                    it.put("module.id", project.name)
                    it.put("module.title", project.name)
                    it.put("module.description",
                            "Xenit API-X implementation Alfresco ${alfresco_version.substring(0, 3)}")
                    it.put("module.version", project.version)
                    it.put("module.repo.version.min", project.alfresco_min_version)
                    if(project.hasProperty("alfresco_max_version")
                        && project.alfresco_max_version != null) {
                        it.put("module.repo.version.max", project.alfresco_max_version)
                    }
                }

            }
        }
        test {
            java {
                srcDirs = ["$project.parent.projectDir/src/test/java"]
            }
            testResultsDirName = "${project.parent.buildDir}/test-results/test"
        }
    }

    // Extend amp plugin task:
    // We want to add 'alfresco-global.properties' etc to the module-specific folder in the AMP
    // (e.g. 'config/module/alfresco/module/apix-impl-72/') without hard-coding project name for each Alfresco version.
    amp {
        deBundles = configurations.dynamicExtensionsBundles + files(jar)
        into("config/alfresco/module/${project.name}") {
            from("${project.parent.projectDir}/config/alfresco-global.properties")
            from("${project.parent.projectDir}/config/log4j.properties")
            from("${project.parent.projectDir}/config/module-context.xml")
            expand(moduleId: project.name)
        }
        into("config/alfresco/module/${project.name}/messages") {
            from("${project.parent.projectDir}/config/messages/")
        }
    }

    afterEvaluate {
        signMavenPublication.dependsOn amp
    }
}

allprojects {
    // Subproject of supported Alfresco version 61/62/70/71/72
    def subproject_alfresco_version = project.projectDir.name == "apix-impl"
            ? "70" : project.projectDir.name
    apply from: "$rootProject.projectDir/alfresco/$subproject_alfresco_version/overrides.gradle"
    // allprojects also applies to shared code (under apix-impl/src) that needs to work in IntelliJ
    apply plugin: 'eu.xenit.de'
    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'java-library'

    dependencies {
        api(project(":apix-interface"))
        implementation 'commons-lang:commons-lang:1.0'

        alfrescoProvided(platform("org.alfresco:acs-community-packaging:$alfresco_version")) {
            exclude group: "org.mockito"
            exclude group: "com.fasterxml.jackson.core"
        }
        alfrescoProvided("org.alfresco:alfresco-repository")
        alfrescoProvided('org.alfresco:alfresco-remote-api')

        implementation group: 'org.yaml', name: 'snakeyaml', version: '1.15'
        implementation group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'

        testImplementation 'org.alfresco:alfresco-repository'
        testImplementation 'org.alfresco:alfresco-remote-api'
        testImplementation 'org.alfresco:alfresco-data-model'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.25.1'
    }

    task generateVersionFile(type: Task) {
        def versionFile = "${rootDir}/apix-impl/src/main/java/eu/xenit/apix/Version.java"
        outputs.file versionFile
        doFirst {
            file(versionFile).text = """package eu.xenit.apix;
/*
 * WARNING: THIS FILE IS AUTO-GENERATED BY GRADLE DURING BUILD. 
 * ANY CHANGES TO THIS FILE WILL BE LOST AFTER NEW BUILD.
 * SEE task generateVersionFile IN api-x_dynamicextensions/build.gradle
 */
public class Version {
	public static final String Number = "${project.versionWithoutQualifier}";
}
"""
        }
    }
    compileJava.dependsOn generateVersionFile

    test {
        // Always run unit tests
        outputs.upToDateWhen { false }

        // Show test results when running from the CLI
        testLogging { events "PASSED", "FAILED", "SKIPPED" }
    }

    jar {
        // This BundleSymbolicName is also used in
        // apix-impl/src/integration-test/java/eu/xenit/apix/tests/ApixImplBundleFilter.java
        // to find which integration tests need to run, so when changing it, change it there too.
        bnd(
                'Export-Package': 'eu.xenit.apix.*; -split-package:=merge-first',
                'Include-Resource': includeResource(configurations.compile),
                'Bundle-ClassPath': bundleClassPath(configurations.compile),
                'Bundle-SymbolicName': "${project.group}.${project.name}",
                'Bundle-Description': 'Alfred API: Java API and REST API',
                'Import-Package': 'org.springframework.beans.factory,'
                        + 'org.springframework.cglib.core,'
                        + 'org.springframework.cglib.proxy,'
                        // Unintuitively, the notation 'version="1.0"' means any version >= 1.0
                        + 'org.json;version="1.0",'
                        + '!com.google.appengine.api,'
                        + '!com.google.apphosting.api,'
                        + '!org.joda.convert,'
                        + '*'
        )
    }

    alfrescoDynamicExtensions {
        versions.dynamicExtensions = de_version
        // Configure endpoint for installBundle task
        repository {
            endpoint {
                protocol = project.hasProperty('protocol') ? project.protocol : 'http'
                host = project.hasProperty('host') ? project.host : 'localhost'
                port = project.hasProperty('port') ? project.port : 8080
            }
        }
    }
}
