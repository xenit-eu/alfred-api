import com.github.dynamicextensionsalfresco.gradle.configuration.BaseConfig
import com.github.dynamicextensionsalfresco.gradle.tasks.InstallBundle

subprojects {
    // Isolate the version number ("apix-impl-52" -> "52").
    def subproject_alfresco_version = project.name.substring(project.name.length() - 2)

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }

            amp(MavenPublication) {
                artifactId "apix-impl-${subproject_alfresco_version}-amp"
                // TODO: This should be replaced by a proper reference to an artifact
                artifact file(ampFile)
            }
        }
    }

    apply from: "${rootProject.projectDir}/publish.gradle"
    apply from: "${project.projectDir}/overrides.gradle"
    apply plugin: 'org.dm.bundle'
    apply plugin: 'ampde'

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/main/java-shared']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java', 'src/test/java-shared']
            }
            testResultsDirName = "${buildDir}/test-results/test"
        }
    }

    configurations {
        ampArtifact
    }

    artifacts {
        ampArtifact ampde
    }

    dependencies {
        compile(project(":apix-interface"))
        compile(project(":apix-rest-v1")) {
            exclude group: 'org.alfresco'
        }
        compileOnly("eu.xenit.de:annotations:${de_version}") {
            transitive = false
        }
        compileOnly("eu.xenit.de:webscripts:${de_version}") {
            transitive = false
        }

        compileOnly(group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_version) {
            exclude group: 'maven-plugins'
        }
        compileOnly(group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_version) {
            transitive = false
        }

        compile group: 'org.yaml', name: 'snakeyaml', version: '1.15'
        compile group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'

        // Works for 6x too
        ampdeLib files("${rootDir}/lib/swagger-ui_5x-1.1.0.jar")

        testCompile group: 'eu.xenit.de', name: 'annotations', version: de_version
        testCompile group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_version
        testCompile group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        testCompile group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_version

        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.25.1'
        testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
        testCompile group: 'eu.xenit.testing', name: 'integration-testing', version: '1.1.0'
    }

    task generateVersionFile(type: Task) {
        def versionFile = "${rootDir}/apix-impl/src/main/java/eu/xenit/apix/Version.java"
        outputs.file versionFile
        doFirst {
            file(versionFile).text = """package eu.xenit.apix;
/*
 * WARNING: THIS FILE IS AUTO-GENERATED BY GRADLE DURING BUILD. 
 * ANY CHANGES TO THIS FILE WILL BE LOST AFTER NEW BUILD.
 * SEE task generateVersionFile IN api-x_dynamicextensions/build.gradle
 */
public class Version {
	public static final String Number = "${project.versionWithoutQualifier}";
}
"""
        }
    }
    compileJava.dependsOn generateVersionFile

    test {
        // Always run unit tests
        outputs.upToDateWhen { false }

        // Show test results when running from the CLI
        testLogging { events "PASSED", "FAILED", "SKIPPED" }
    }

    bundle {
        instruction 'Export-Package', 'eu.xenit.apix.*'
        instruction 'Include-Resource', includeResource(configurations.compile)
        instruction 'Bundle-ClassPath', bundleClassPath(configurations.compile)
        instruction 'Bundle-Description', 'APIX Impl + REST API'
        instruction 'Alfresco-Dynamic-Extension', 'true'
        instruction 'Import-Package', ('org.springframework.beans.factory,'
                + 'org.springframework.cglib.core,'
                + 'org.springframework.cglib.proxy,'
                + '!org.codehaus.jackson.map,'
                + '!com.google.errorprone.annotations.concurrent,'
                + '!org.joda.convert,'
                + '*')
    }

    project.extensions.add("alfrescoDynamicExtensions", new BaseConfig())

    // Extend 'ampde' plugin's task:
    // We want to add 'alfresco-global.properties' to the module-specific folder in the AMP
    // (e.g. 'config/module/alfresco/module/apix-impl-51/') without hard-coding project name for each Alfresco version.
    assembleAmp {
        into("config/alfresco/module/${project.moduleId}") {
            from("${project.parent.projectDir}/config/alfresco-global.properties")
            from("${project.parent.projectDir}/config/log4j.properties")
            from("${project.parent.projectDir}/config/module-context.xml")
            expand(moduleId: project.moduleId)
        }
        into("config/alfresco/module/${project.moduleId}/messages") {
            from("${project.parent.projectDir}/config/messages/")
        }
    }

    task installBundle(type: InstallBundle) {
        dependsOn jar
        doFirst {
            def host = project.hasProperty('host') ? project.host : 'localhost'
            def port = project.hasProperty('port') ? project.port : '8080'
            def protocol = project.hasProperty('protocol') ? project.protocol : 'http'
            alfrescoDynamicExtensions.repository.endpoint.port = port
            alfrescoDynamicExtensions.repository.endpoint.host = host
            alfrescoDynamicExtensions.repository.endpoint.protocol = protocol
        }
    }
}
