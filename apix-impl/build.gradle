plugins {
    id 'eu.xenit.de' version '2.1.3' apply false
    id 'eu.xenit.amp' version '1.1.0' apply false
    id 'eu.xenit.alfresco' version '1.1.0' apply false
}

// Give IntelliJ a default source of non-shared classes
ext {
    alfresco_version = alfresco_62_version
    alfresco_repo_version = '7.199.0'
    alfresco_dm_version = alfresco_62_dm_version
    alfresco_min_version = '6.2'
}

sourceSets.main.java.srcDirs += 'src/main/java'

subprojects {
    apply from: "${project.projectDir}/overrides.gradle"
    apply from: "${rootProject.projectDir}/publish.gradle"
    apply plugin: 'eu.xenit.amp'
    apply plugin: 'java-library'

    configurations {
        ampArtifact
    }

    artifacts {
        ampArtifact amp
    }

    dependencies {
        api(project(":apix-impl"))
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId "${project.name}-amp"
                artifact tasks.amp
            }
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', '../src/main/java']
            }
            amp {
                module("src/main/config/module.properties")
            }
        }
        test {
            java {
                srcDirs = ['../src/test/java']
            }
            testResultsDirName = "${buildDir}/test-results/test"
        }
    }

    // Extend amp plugin task:
    // We want to add 'alfresco-global.properties' etc to the module-specific folder in the AMP
    // (e.g. 'config/module/alfresco/module/apix-impl-72/') without hard-coding project name for each Alfresco version.
    amp {
        into("config/alfresco/module/${project.name}") {
            from("${project.parent.projectDir}/config/alfresco-global.properties")
            from("${project.parent.projectDir}/config/log4j.properties")
            from("${project.parent.projectDir}/config/module-context.xml")
            expand(moduleId: project.name)
        }
        into("config/alfresco/module/${project.name}/messages") {
            from("${project.parent.projectDir}/config/messages/")
        }
    }

    afterEvaluate {
        signMavenPublication.dependsOn amp
    }
}

allprojects {
    // allprojects also applies to shared code (under apix-impl/src) that needs to work in IntelliJ
    apply plugin: 'eu.xenit.alfresco'
    apply plugin: 'java-library'

    dependencies {
        api(project(":apix-interface"))
        implementation 'commons-lang:commons-lang:1.0'

        alfrescoProvided platform("org.alfresco:acs-community-packaging:$alfrescoVersion")
        alfrescoProvided("org.alfresco:alfresco-repository")
        alfrescoProvided('org.alfresco:alfresco-remote-api')

        implementation group: 'org.yaml', name: 'snakeyaml', version: '1.15'
        implementation group: 'javax.validation', name: 'validation-api', version: '1.1.0.Final'

        testImplementation platform("org.alfresco:acs-community-packaging:$alfrescoVersion")
        testImplementation 'org.alfresco:alfresco-repository'
        testImplementation 'org.alfresco:alfresco-remote-api'
        testImplementation 'org.alfresco:alfresco-data-model'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.25.1'
    }

    task generateVersionFile(type: Task) {
        def versionFile = "${rootDir}/apix-impl/src/main/java/eu/xenit/apix/Version.java"
        outputs.file versionFile
        doFirst {
            file(versionFile).text = """package eu.xenit.apix;
/*
 * WARNING: THIS FILE IS AUTO-GENERATED BY GRADLE DURING BUILD. 
 * ANY CHANGES TO THIS FILE WILL BE LOST AFTER NEW BUILD.
 * SEE task generateVersionFile IN api-x_dynamicextensions/build.gradle
 */
public class Version {
	public static final String Number = "${project.versionWithoutQualifier}";
}
"""
        }
    }
    compileJava.dependsOn generateVersionFile

    test {
        // Always run unit tests
        outputs.upToDateWhen { false }

        // Show test results when running from the CLI
        testLogging { events "PASSED", "FAILED", "SKIPPED" }
    }
}
