plugins {
    id 'base'
    id 'eu.xenit.de' version '2.1.3' apply false
    id 'eu.xenit.alfresco' version '1.1.0' apply false
    id 'eu.xenit.alfresco-remote-testrunner' version '2.0.1' apply false
}

def integrationTestsProjectDir = project.projectDir
allprojects {
    // Following needs to apply to shared (./src) project and version-specific (e.g. ./70) projects.
    apply plugin: 'idea'
    apply plugin: 'eu.xenit.de'
    apply plugin: 'eu.xenit.alfresco-remote-testrunner'
    apply plugin: 'eu.xenit.alfresco'
    apply from: "${project.projectDir}/overrides.gradle"

    sourceSets {
        main.java.srcDirs = []
        main.resources.srcDirs = []
        integrationTest.java.srcDirs = [
            "$integrationTestsProjectDir/src/main/java",
            "$integrationTestsProjectDir/$subproject_alfresco_version/src/main/java"
        ]
        integrationTest.resources.srcDirs = [
            "$integrationTestsProjectDir/src/main/resources",
            "$integrationTestsProjectDir/$subproject_alfresco_version/src/main/resources"
        ]
    }

    configurations {
        implementation {
            extendsFrom integrationTestImplementationRemote
        }
    }

    dependencies {
        alfrescoProvided project(":apix-rest-v1")
        alfrescoProvided project(":apix-interface")
        alfrescoProvided project(":apix-impl") // Needed because of the below transitive exclusion
        // Add services used to the integration test fatjar, since we can't access the ones deployed in Alfresco
        integrationTestImplementationRemote (project(":apix-impl:apix-impl-${subproject_alfresco_version}")) {
            // Already includes apix-interface, we need to exclude it to avoid Linkage errors from
            // having 2 of the same classes on the classpath
            // (1 in Alfresco from apix-impl AMP + 1 in DE from the integration tests fat jar)
            transitive = false
        }

        alfrescoProvided group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_remote_api_version
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        alfrescoProvided group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'
    }
}

subprojects {
    def projectApixImpl = project(":apix-impl:apix-impl-${subproject_alfresco_version}")
    def projectDocker = project(":apix-docker:docker-${subproject_alfresco_version}")
    evaluationDependsOn(projectApixImpl.path)
    evaluationDependsOn(projectDocker.path)
    def assembleTask = projectApixImpl.tasks.getByName("assemble")
    def composeUpTask = projectDocker.tasks.getByName("composeUp")
    def composeDownTask = projectDocker.tasks.getByName("composeDown")

    alfrescoIntegrationTest {
        integrationTestPackages = ["eu.xenit.apix"]
    }

    alfrescoDynamicExtensions {
        repository {
            endpoint {
                protocol = project.hasProperty('protocol') ? project.protocol : 'http'
                host = project.hasProperty('host') ? project.host : 'localhost'
                port = project.hasProperty('port') ? project.port : 8080
            }
        }
    }

    installBundle.enabled = false
    jar.enabled = false

    installIntegrationTestingBundle {
        dependsOn assembleTask
        dependsOn composeUpTask
        doFirst {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            if(serviceInfo != null) {
                alfrescoDynamicExtensions {
                    repository {
                        endpoint {
                            host = serviceInfo.getHost()
                            port = serviceInfo.ports[8080]
                        }
                    }
                }
            }
        }
    }

    integrationTest {
        // After the tests, the docker setup should be stopped
        finalizedBy composeDownTask
    }
}

