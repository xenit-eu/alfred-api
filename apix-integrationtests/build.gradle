plugins {
    id 'base'
    id 'eu.xenit.de' version '2.0.5' apply false
    id 'eu.xenit.alfresco' version '1.0.0' apply false
    id 'eu.xenit.alfresco-remote-testrunner' version '2.0.0-rc.6' apply false
}

allprojects {
    // Following needs to apply to shared (./src) project and version-specific (e.g. ./70) projects.
    apply plugin: 'eu.xenit.de'
    apply plugin: 'eu.xenit.alfresco-remote-testrunner'
    apply plugin: 'eu.xenit.alfresco'
    apply from: "${project.projectDir}/overrides.gradle"

    sourceSets {
        main {
            java {
                srcDirs = []
            }
            resources {
                srcDirs = []
            }
        }
        integrationTest {
            java {
                srcDirs = ['./src/main/java']
            }
            resources {
                srcDirs = ['./src/main/resources']
            }
        }
    }

    dependencies {
        alfrescoProvided project(":apix-rest-v1")
        alfrescoProvided project(":apix-interface")
        alfrescoProvided project(":apix-impl:apix-impl-${subproject_alfresco_version}")

        alfrescoProvided group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_repo_version
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_remote_api_version
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        alfrescoProvided group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'
    }
}

subprojects {
    sourceSets {
        integrationTest {
            java {
                srcDirs = ['../src/main/java', './src/main/java']
            }
            resources {
                srcDirs = ['../src/main/resources', './src/main/resources']
            }
        }
    }

    def projectDocker = project(":apix-docker:docker-${subproject_alfresco_version}")
    evaluationDependsOn(projectDocker.path)
    def composeUpTask = projectDocker.tasks.getByName("composeUp")
    def composeDownTask = projectDocker.tasks.getByName("composeDown")

    alfrescoIntegrationTest {
        integrationTestPackages = ["eu.xenit.apix"]
    }

    alfrescoDynamicExtensions {
        repository {
            endpoint {
                protocol = project.hasProperty('protocol') ? project.protocol : 'http'
                host = project.hasProperty('host') ? project.host : 'localhost'
                port = project.hasProperty('port') ? project.port : 8080
            }
        }
    }

    installBundle.enabled = false

    installIntegrationTestingBundle {
        dependsOn composeUpTask
        doFirst {
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            if(serviceInfo != null) {
                alfrescoDynamicExtensions {
                    repository {
                        endpoint {
                            host = serviceInfo.getHost()
                            port = serviceInfo.ports[8080]
                        }
                    }
                }
            }
        }
    }

    dependencies {
        // This dependency is for code-highlighting in Intellij only,
        // compileOnly is for the 'main' sourceSet, and is not inherited by
        // the integrationTest sourceSet, so it does not actually affect the code that's
        // being compiled.
        // This is important, because else we would be adding a second version of all dependencies
        // with the version as specified in the shared-sources override.gradle. That would then
        // possibly cause compile- or runtime errors because Gradle automatically selects the
        // latest version when duplicate dependencies are in the same configuration.
        compileOnly project(':apix-integrationtests')
    }

    integrationTest {
        // After the tests, the docker setup should be stopped
        finalizedBy composeDownTask
    }

}

