import com.github.dynamicextensionsalfresco.gradle.tasks.InstallBundle

plugins {
    id 'eu.xenit.de' version '2.0.2' apply false
    id 'eu.xenit.alfresco' version '1.0.0' apply false
}

subprojects {
    apply from: "${project.projectDir}/overrides.gradle"
    apply plugin: 'eu.xenit.de'
    apply plugin: 'eu.xenit.alfresco'

    sourceSets {
        main {
            java {
                srcDirs = ['src/integration-test/java-shared', 'src/main/java']
                // This is needed because client side, these dependencies are not really provided
                runtimeClasspath += configurations.compileOnly
            }
            resources {
                srcDir "${project.parent.projectDir}/src/integration-test/resources"
            }
        }
    }

    configurations {
        integrationJar
        compileOnly.extendsFrom(integrationJar)
    }

    dependencies {
        compileOnly project(":apix-rest-v1")
        compileOnly project(":apix-interface")
        compileOnly project(":apix-impl:apix-impl-${subproject_alfresco_version}")

        alfrescoProvided group: 'org.alfresco', name: 'alfresco-repository', version: alfresco_version
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-remote-api', version: alfresco_version
        alfrescoProvided group: 'org.alfresco', name: 'alfresco-data-model', version: alfresco_dm_version
        alfrescoProvided group: 'org.osgi', name: 'org.osgi.core', version: '4.3.1'

        integrationJar group: 'eu.xenit.testing', name: 'integration-testing', version: '1.1.0'

        compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: http_version
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: http_version
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: http_core_version
        compile group: 'org.apache.httpcomponents', name: 'httpmime', version: http_version
        compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
        compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
        compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
        compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
        compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jackson_version
        compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: jackson_version
    }

    jar {
        bnd(
                'Export-Package': 'eu.xenit.apix.tests.*,eu.xenit.apix.rest.*.tests.*',
                'Include-Resource': includeResource(configurations.compile),
                'Bundle-ClassPath': bundleClassPath(configurations.compile),
                'Bundle-SymbolicName': "${project.group}.${project.name}",
                'Bundle-Description': 'Alfred API: Integration tests',
                'Import-Package': 
                        // Unintuitively, the notation 'version="1.0"' means any version >= 1.0
                         'org.json;version="1.0",'
                        + "!com.google.errorprone.annotations.concurrent,"
                        + '!org.joda.convert,'
                        + '!org.apache.log,'
                        + '*'
        )
    }

    def projectDocker = project(":apix-docker:docker-${subproject_alfresco_version}")
    def composeUpTask = projectDocker.tasks.getByName("composeUp")
    def composeDownTask = projectDocker.tasks.getByName("composeDown")

    task configureDynamicExtensions {
        group 'verification'
        dependsOn composeUpTask
        doLast {
            // Default values
            def protocol = 'http'
            def host = 'localhost'
            def port = '8080'

            // Service info values override defaults
            // They are only available when composeUp tasks is in the current call graph
            def serviceInfo = composeUpTask.servicesInfos.get("alfresco-core")
            if(serviceInfo != null) {
                port = serviceInfo.ports[8080]
                host = serviceInfo.getHost()
            }

            // Values passed as properties override everything
            if(project.hasProperty('protocol')) {
                protocol = project.protocol
            }
            if(project.hasProperty('host')) {
                host = project.host
            }
            if(project.hasProperty('port')) {
                port = project.port
            }

            alfrescoDynamicExtensions.repository.endpoint.protocol = protocol
            alfrescoDynamicExtensions.repository.endpoint.port = port
            alfrescoDynamicExtensions.repository.endpoint.host = host
        }
    }

    task installIntegrationJar(type: InstallBundle) {
        group 'verification'
        dependsOn configureDynamicExtensions
        files = configurations.integrationJar { transitive = false }
    }

    task installTestsOnDocker(type: InstallBundle) {
        group 'verification'
        dependsOn installIntegrationJar
        dependsOn jar
        files = jar
    }

    task integrationTest(type: Test) {
        group 'verification'
        dependsOn installTestsOnDocker
        testClassesDirs = sourceSets.main.output.classesDirs
        classpath = sourceSets.main.runtimeClasspath

        doFirst {
            def endpoint = alfrescoDynamicExtensions.repository.endpoint
            def alfresco_url = "${endpoint.protocol.get()}://admin:admin@${endpoint.host.get()}:${endpoint.port.get()}/alfresco"
            println("Running integration tests on alfresco.url = ${alfresco_url}")
            systemProperty("alfresco.url", alfresco_url)
        }
        outputs.upToDateWhen { false }
        // After the tests, the docker setup should be stopped
        finalizedBy(composeDownTask)
    }
}
